<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>http://cocoanuts.mobi</link>
    <atom:link href="http://cocoanuts.mobi/feed.xml" rel="self" type="application/rss+xml" />
    <description></description>
    <language>en-us</language>
    <pubDate>Mon, 04 Aug 2014 20:39:00 +0000</pubDate>
    <lastBuildDate>Mon, 04 Aug 2014 20:39:00 +0000</lastBuildDate>

    
    
    <item>
      <title>What would you do if you weren't afraid?</title>
      <link>http://cocoanuts.mobi/2014/08/03/facebook/</link>
      <pubDate>Sun, 03 Aug 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://cocoanuts.mobi/2014/08/03/facebook</guid>
      <description>&lt;p&gt;It has been almost three months since my last blog post. Things have changed a bit since then. Three months ago, I didn’t expect a brand new programming language to be announced at WWDC. I wasn’t planning to switch jobs again any time soon. I certainly didn’t picture myself living in a different country in the foreseeable future.&lt;/p&gt;

&lt;p&gt;Like all good stories, it started with a LinkedIn recruiter email. Except that this one was slightly different. It felt somewhat more personal and referenced some professional details that were not listed directly in my LinkedIn profile. Also, it was coming from Facebook. Now I have to admit that working for Facebook has &lt;em&gt;not&lt;/em&gt; been a life long dream of mine. I briefly considered the idea of working for a big software company in Silicon Valley or London when I was a bit younger, but back then it was Apple rather than Facebook I was thinking of.&lt;/p&gt;

&lt;p&gt;However, since I began working as a full-time iOS developer about a year ago, I started looking at Facebook with different eyes. I noticed that Matt Galloway, who wrote &lt;a href=&quot;http://www.effectiveobjectivec.com&quot;&gt;my favorite book about Objective-C&lt;/a&gt;, started working there. Nick Lockwood, Graham Lee and John Harper followed later this year. I had been impressed with the open source iOS frameworks that Facebook released. I tried out tools like &lt;a href=&quot;https://github.com/facebook/ios-snapshot-test-case&quot;&gt;Snapshot test case&lt;/a&gt;, &lt;a href=&quot;https://github.com/facebook/chisel&quot;&gt;Chisel&lt;/a&gt; and &lt;a href=&quot;https://github.com/facebook/Tweaks&quot;&gt;Tweaks&lt;/a&gt; and they turned out to be really useful. I watched a video about &lt;a href=&quot;https://www.youtube.com/watch?v=OiY1cheLpmI&quot;&gt;Building Paper&lt;/a&gt;, which made me realize just how far engineers at Facebook are pushing the limits of iOS, and how challenging it must be to work on apps that are used by a &lt;em&gt;billion&lt;/em&gt; people.&lt;/p&gt;

&lt;p&gt;So I did what I never do. I replied to a LinkedIn recruiter email and mentioned that I was willing to discuss the opportunity over the phone. I still think it was more curiosity than anything else. I had a job I was perfectly happy with and I had bought a nice house near &lt;a href=&quot;http://americablog.com/2014/07/knew-ghent-belgium-prettiest-city-world.html&quot;&gt;Ghent&lt;/a&gt; where I was living with my wife and two little children. It seemed &lt;em&gt;very&lt;/em&gt; unlikely that we would suddenly leave all of this behind to go live and work in London. But I figured that I had nothing to lose and a simple phone call could do no harm.&lt;/p&gt;

&lt;p&gt;I wasn’t nervous for that first call, but I didn’t really know what to expect either. The technical recruiter was genuinely friendly. We discussed my past experiences and aspirations for about half an hour, then she moved on to a series of multiple choice questions about Objective-C. I was caught a little by surprise by this, but the questions were not &lt;em&gt;too&lt;/em&gt; hard. Of course, after that first call, I no longer felt like I had nothing to lose. After all, I had made it through the initial screening and there was a very small but real chance that I would be able to join the iOS team at Facebook London. The team led by Alan Cannistraro, who had indirectly introduced me (and the rest of the world) to iOS development five years ago, when I spent the entire summer watching the Stanford videos on iTunes U.&lt;/p&gt;

&lt;p&gt;The next hurdle was a Skype call with an iOS engineer in Menlo Park, which would mostly consist of doing coding exercises in a collaborative editor. I had about ten days to prepare myself, so I dusted off an old book on data structures and downloaded a copy of &lt;a href=&quot;http://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/098478280X&quot;&gt;Cracking the Coding Interview&lt;/a&gt;. The coding interview itself did &lt;em&gt;not&lt;/em&gt; go as well as I had hoped. I think I was simply too nervous (and too tired after a day’s work) to perform at my best. I struggled with the easy warm-up question and rushed into the harder follow-up question. Fortunately, I did remember more or less what a &lt;a href=&quot;http://en.wikipedia.org/wiki/Trie&quot;&gt;trie&lt;/a&gt; is and what it is good for, so it wasn’t a total disaster either.&lt;/p&gt;

&lt;p&gt;My recruiter called me later that week to tell me that they still wanted to fly me in to London to do an interview loop. At that point I decided to just go for it and deal with all possible practical considerations later. The next weeks were pretty intense. I spent every spare moment studying &lt;a href=&quot;http://www.amazon.com/Algorithm-Design-Manual-Steve-Skiena/dp/0387948600&quot;&gt;algorithm design&lt;/a&gt; and &lt;a href=&quot;https://www.mikeash.com/pyblog/&quot;&gt;advanced iOS topics&lt;/a&gt;. It’s weird how you forget about Peterson, Dijkstra, Knuth and friends once you are graduated and start developing actual software. I guess &lt;a href=&quot;http://steve-yegge.blogspot.be/2008/03/get-that-job-at-google.html&quot;&gt;real-world work really does make you rusty&lt;/a&gt;. Fortunately my daughter was kind enough to let me use her whiteboard to practice my coding skills:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2014080301.jpg&quot; alt=&quot;Whiteboard coding&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And then I went to London. I left on Sunday evening and had taken the Monday off from work. When I arrived at the new Facebook offices at Regent’s place, I felt surprisingly calm. I knew I had prepared the best I could, so if it didn’t work out after all, it probably just wan’t meant to be. The location was quite impressive, with coffee bars, candy stores and arcade rooms spread across the office floors.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2014080302.jpg&quot; alt=&quot;Regents Place, London&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The actual interviews were more or less what I had expected: whiteboard coding, architectural discussions, motivational questions, and more whiteboard coding. If you are looking for more details, there is &lt;a href=&quot;https://www.facebook.com/notes/facebook-engineering/get-that-job-at-facebook/10150964382448920&quot;&gt;a post&lt;/a&gt; that explains the technical recruitment process at Facebook quite accurately. I finally got to meet my recruiter in person, and during lunch I was joined by the other Belgian iOS developer working there. Every person I talked to appeared to be friendly, interested, passionate and smart. As I flew back to Belgium at the end of the day, I felt exhausted but also started to feel more and more optimistic.&lt;/p&gt;

&lt;p&gt;While waiting for the final round of feedback, my wife and I finally started considering the practical implications of moving to London more seriously, but at that point it somehow felt like our decision was already made. Were we going to take this risk or were we going to wonder the rest of our lives what might have been? I had spent two months contemplating what it would be like to work at Facebook and had invested a lot of energy in preparing for the interviews. Looking back, there wasn’t really a clear point in time where we decided anything at all, things just led from one thing to another. So here we are now: selling old furniture, browsing rental properties, teaching our daughter her first few English words. My first day at Facebook is not until November, but the adventure has already started.&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>A more generic builder pattern for Objective-C</title>
      <link>http://cocoanuts.mobi/2014/05/15/builder/</link>
      <pubDate>Thu, 15 May 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://cocoanuts.mobi/2014/05/15/builder</guid>
      <description>&lt;p&gt;A few weeks ago I came across this &lt;a href=&quot;http://www.annema.me/blog/post/2014/4/4/the-builder-pattern-in-objective-c&quot;&gt;blog post&lt;/a&gt; about a builder pattern for Objective-C. It was one of our interns who pointed me to the article and asked if I considered this to be a good idea. Here’s what it looks like:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;    &lt;span class=&#39;n&#39;&gt;Pizza&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;pizza&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;Pizza&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;pizzaWithBlock&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:^&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;PizzaBuilder&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;builder&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;])&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;n&#39;&gt;builder&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;size&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;12&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
        &lt;span class=&#39;n&#39;&gt;builder&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;pepperoni&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;YES&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
        &lt;span class=&#39;n&#39;&gt;builder&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;mushrooms&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;YES&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At first I dismissed it altogether. Being familiar with the builder pattern in C#, I considered this Objective-C variant to be somewhat contrived and lacking the typical fluent syntax characterized by method chaining.&lt;/p&gt;

&lt;p&gt;A week or two later, I watched a video about &lt;a href=&quot;https://www.youtube.com/watch?v=OiY1cheLpmI&quot;&gt;Building Paper&lt;/a&gt; and learned about &lt;a href=&quot;https://code.facebook.com/posts/234067533455773/introducing-pop-the-animation-engine-behind-paper/&quot;&gt;Pop&lt;/a&gt;, the animation engine that was released by Facebook as (yet another) open source framework for iOS. Looking further into this the next day, I encountered the following code snippet in the Pop documentation:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;    &lt;span class=&#39;n&#39;&gt;prop&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;POPAnimatableProperty&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;propertyWithName&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;com.foo.radio.volume&amp;quot;&lt;/span&gt;
                                       &lt;span class=&#39;nl&#39;&gt;initializer:&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;^&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;POPMutableAnimatableProperty&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;prop&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;c1&#39;&gt;// read value&lt;/span&gt;
        &lt;span class=&#39;n&#39;&gt;prop&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;readBlock&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;^&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;id&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;obj&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;CGFloat&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;values&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[])&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;values&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;obj&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;volume&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;};&lt;/span&gt;
        &lt;span class=&#39;c1&#39;&gt;// write value&lt;/span&gt;
        &lt;span class=&#39;n&#39;&gt;prop&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;writeBlock&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;^&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;id&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;obj&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;const&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;CGFloat&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;values&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[])&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;obj&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;setVolume&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;values&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]];&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;};&lt;/span&gt;
        &lt;span class=&#39;c1&#39;&gt;// dynamics threshold&lt;/span&gt;
        &lt;span class=&#39;n&#39;&gt;prop&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;threshold&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mf&#39;&gt;0.01&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It’s that same builder pattern again! However, there is one small but important thing that the Facebook example makes obvious and that I failed to realize before: &lt;em&gt;there is no need to add dedicated builder objects to Objective-C because they are already present in the language in the form of mutable objects.&lt;/em&gt; In fact, this allows us to implement the builder patter in a more generic way, e.g. as a category on &lt;code&gt;NSObject&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;    &lt;span class=&#39;k&#39;&gt;@interface&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;NSObject&lt;/span&gt; &lt;span class=&#39;nl&#39;&gt;(Builder)&lt;/span&gt;

    &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;instancetype&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;initUsingBlock&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;^&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;id&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;mutableCopy&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;))&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;block&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;

    &lt;span class=&#39;k&#39;&gt;@end&lt;/span&gt;

    &lt;span class=&#39;k&#39;&gt;@implementation&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;NSObject&lt;/span&gt; &lt;span class=&#39;nl&#39;&gt;(Builder)&lt;/span&gt;

    &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;instancetype&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;initUsingBlock&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;^&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;id&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;mutableCopy&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;))&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;block&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;init&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;block&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;kt&#39;&gt;id&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;mutableCopy&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;mutableCopy&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;block&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;mutableCopy&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;mutableCopy&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;copy&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

    &lt;span class=&#39;k&#39;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are some obvious limitations with this simple approach (most notably it only works for default initializers), but without adding anything else we can now start writing code like this:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;    &lt;span class=&#39;n&#39;&gt;NSParagraphStyle&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;paragraphStyle&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSParagraphStyle&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;alloc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;initUsingBlock&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:^&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSMutableParagraphStyle&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;paragraphStyle&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;n&#39;&gt;paragraphStyle&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;alignment&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;NSTextAlignmentCenter&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
        &lt;span class=&#39;n&#39;&gt;paragraphStyle&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;lineSpacing&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mf&#39;&gt;0.0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}];&lt;/span&gt;
    
    &lt;span class=&#39;n&#39;&gt;NSDictionary&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;attributes&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;@{&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;NSParagraphStyleAttributeName&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;paragraphStyle&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;};&lt;/span&gt;
    
    &lt;span class=&#39;n&#39;&gt;NSAttributedString&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;text&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSAttributedString&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;alloc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;initUsingBlock&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:^&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSMutableAttributedString&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;text&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;text&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;appendAttributedString&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSAttributedString&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;alloc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;initWithString&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;paragraph1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]];&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;text&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;appendAttributedString&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSAttributedString&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;alloc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;initWithString&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;paragraph2&lt;/span&gt;
                                                                     &lt;span class=&#39;nl&#39;&gt;attributes:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;attributes&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]];&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;text&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;appendAttributedString&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSAttributedString&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;alloc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;initWithString&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;paragraph3&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]];&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The same implementation can be reused for all other classes with mutable variants. Instead of implementing a &lt;code&gt;PizzaBuilder&lt;/code&gt; class with a &lt;code&gt;build&lt;/code&gt; method, and adding an &lt;code&gt;initWithBuilder&lt;/code&gt; method in the &lt;code&gt;Pizza&lt;/code&gt; class, we just need to implement a &lt;code&gt;MutablePizza&lt;/code&gt; class and the default copy methods. This limits boilerplate code to a bare minimum and makes the builder pattern a more natural fit for the language.&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>Asynchronous image loading in fast scrolling table cells</title>
      <link>http://cocoanuts.mobi/2014/04/27/fastscroll/</link>
      <pubDate>Sun, 27 Apr 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://cocoanuts.mobi/2014/04/27/fastscroll</guid>
      <description>&lt;p&gt;AFNetworking’s UIImageView category must be one of its most popular features. The functionality it offers is so commonly needed, and the implementation details are hidden in such a way that you would almost forget that a third party network library is being used. For instance, consider the following simple example where a batch of random images is loaded in a plain table view.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;    &lt;span class=&#39;k&#39;&gt;@implementation&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;TableViewController&lt;/span&gt;

    &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSArray&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;imageURLs&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;!&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;_imageURLs&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;NSMutableArray&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;imageURLs&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSMutableArray&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;array&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
            
            &lt;span class=&#39;k&#39;&gt;for&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSInteger&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;index&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;index&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;100&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;++&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;index&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
            &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
                &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;imageURLs&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;addObject&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;stringWithFormat&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;
                                      &lt;span class=&#39;s&#39;&gt;@&amp;quot;http://dummyimage.com/88/%06X/%06X&amp;amp;text=%d&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;
                                      &lt;span class=&#39;n&#39;&gt;arc4random&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;()&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&lt;/span&gt; &lt;span class=&#39;mh&#39;&gt;0xFFFFFF&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;
                                      &lt;span class=&#39;n&#39;&gt;arc4random&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;()&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&lt;/span&gt; &lt;span class=&#39;mh&#39;&gt;0xFFFFFF&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;
                                      &lt;span class=&#39;n&#39;&gt;index&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]];&lt;/span&gt;
            &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
            
            &lt;span class=&#39;n&#39;&gt;_imageURLs&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;imageURLs&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
        
        &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;_imageURLs&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

    &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;viewDidLoad&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;super&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        
        &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;tableView&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;registerClass&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;class&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt;
               &lt;span class=&#39;nl&#39;&gt;forCellReuseIdentifier:&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;TableViewCell&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

    &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSInteger&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;numberOfSectionsInTableView&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;UITableView&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;tableView&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

    &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSInteger&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;tableView&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;UITableView&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;tableView&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;numberOfRowsInSection&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSInteger&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;section&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;imageURLs&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;count&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

    &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;tableView&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;UITableView&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;tableView&lt;/span&gt;
             &lt;span class=&#39;nl&#39;&gt;cellForRowAtIndexPath:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSIndexPath&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;indexPath&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;n&#39;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;cell&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;tableView&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;dequeueReusableCellWithIdentifier&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;TableViewCell&amp;quot;&lt;/span&gt;
                                                                &lt;span class=&#39;nl&#39;&gt;forIndexPath:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;indexPath&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        
        &lt;span class=&#39;n&#39;&gt;cell&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;imageView&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;image&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;UIImage&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;imageNamed&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;placeholder&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
      
        &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;cell&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;imageView&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;setImageWithURL&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSURL&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;URLWithString&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;imageURLs&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;indexPath&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;row&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]]];&lt;/span&gt;
        
        &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;cell&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

    &lt;span class=&#39;k&#39;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One downside of using this convenient category is that it can lead to undesired artifacts when scrolling fast in a table view. In the UIImageView+AFNetworking implementation, certain decisions are made to optimize for loading images currently on screen, which is done by cancelling previous requests for offscreen views. This behavior can interfere with cell reuse behavior, which may result in images not being loaded correctly, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2014042701.gif&quot; alt=&quot;Images are not loaded correctly&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To figure out what can be done about these unwanted side-effects, we switch to a lower level implementation using an &lt;code&gt;AFHTTPRequestOperationManager&lt;/code&gt; and its &lt;code&gt;GET:parameters:success:failure&lt;/code&gt; method.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;    &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;AFHTTPRequestOperationManager&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;operationManager&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;!&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;_operationManager&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;_operationManager&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;AFHTTPRequestOperationManager&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;alloc&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;init&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;_operationManager&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;responseSerializer&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;AFImageResponseSerializer&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;serializer&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;};&lt;/span&gt;
        
        &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;_operationManager&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

    &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;tableView&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;UITableView&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;tableView&lt;/span&gt;
             &lt;span class=&#39;nl&#39;&gt;cellForRowAtIndexPath:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSIndexPath&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;indexPath&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;n&#39;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;cell&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;tableView&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;dequeueReusableCellWithIdentifier&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;TableViewCell&amp;quot;&lt;/span&gt;
                                                                &lt;span class=&#39;nl&#39;&gt;forIndexPath:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;indexPath&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        
        &lt;span class=&#39;n&#39;&gt;cell&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;imageView&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;image&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;UIImage&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;imageNamed&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;placeholder&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
      
        &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;operationManager&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;GET&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;imageURLs&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;indexPath&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;row&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt;
                        &lt;span class=&#39;nl&#39;&gt;parameters:&lt;/span&gt;&lt;span class=&#39;nb&#39;&gt;nil&lt;/span&gt;
                           &lt;span class=&#39;nl&#39;&gt;success:&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;^&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;AFHTTPRequestOperation&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;operation&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;id&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;responseObject&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;cell&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;imageView&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;image&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;responseObject&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;failure&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:^&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;AFHTTPRequestOperation&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;operation&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;NSError&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;error&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;NSLog&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;Failed with error %@.&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;error&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}];&lt;/span&gt;
        
        &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;cell&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When running this code, it becomes obvious why cancelling requests for offscreen views is not such a bad idea: if the request queue cannot keep up with the speed of scrolling, the images in the reused cells get overwritten multiple times (and if the responses would arrive out of order, we could end up with wrong images in the cells).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2014042702.gif&quot; alt=&quot;Images get overwritten multiple times&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are two simple approaches to work around this. The first one is to cancel the pending request whenever a cell is reused and a new request is queued:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;    &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;tableView&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;UITableView&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;tableView&lt;/span&gt;
             &lt;span class=&#39;nl&#39;&gt;cellForRowAtIndexPath:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSIndexPath&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;indexPath&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;n&#39;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;cell&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;tableView&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;dequeueReusableCellWithIdentifier&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;TableViewCell&amp;quot;&lt;/span&gt;
                                                                &lt;span class=&#39;nl&#39;&gt;forIndexPath:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;indexPath&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        
        &lt;span class=&#39;n&#39;&gt;cell&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;imageView&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;image&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;UIImage&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;imageNamed&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;placeholder&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
      
        &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;cell&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;imageView&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;associatedObject&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;cancel&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        
        &lt;span class=&#39;n&#39;&gt;cell&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;imageView&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;associatedObject&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;
            &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;operationManager&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;GET&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;imageURLs&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;indexPath&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;row&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt;
                            &lt;span class=&#39;nl&#39;&gt;parameters:&lt;/span&gt;&lt;span class=&#39;nb&#39;&gt;nil&lt;/span&gt;
                               &lt;span class=&#39;nl&#39;&gt;success:&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;^&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;AFHTTPRequestOperation&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;operation&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;id&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;responseObject&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;cell&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;imageView&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;image&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;responseObject&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;failure&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:^&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;AFHTTPRequestOperation&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;operation&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;NSError&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;error&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;NSLog&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;Failed with error %@.&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;error&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}];&lt;/span&gt;
        
        &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;cell&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;associatedObject&lt;/code&gt; property is used in the code above to remember the previously queued operation for each reused cell. It is implemented as a category on &lt;code&gt;NSObject&lt;/code&gt; to avoid subclassing in this simplified example:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;    &lt;span class=&#39;err&#39;&gt;#&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;import&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;objc&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;/&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;runtime&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;h&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&#39;k&#39;&gt;@interface&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;NSObject&lt;/span&gt; &lt;span class=&#39;nl&#39;&gt;(Associating)&lt;/span&gt;

    &lt;span class=&#39;k&#39;&gt;@property&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;nonatomic&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;retain&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;id&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;associatedObject&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;

    &lt;span class=&#39;k&#39;&gt;@end&lt;/span&gt;

    &lt;span class=&#39;k&#39;&gt;@implementation&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;NSObject&lt;/span&gt; &lt;span class=&#39;nl&#39;&gt;(Associating)&lt;/span&gt;

    &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;id&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;associatedObject&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;objc_getAssociatedObject&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;@selector&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;associatedObject&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;));&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

    &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;void&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;setAssociatedObject&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;id&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;associatedObject&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;n&#39;&gt;objc_setAssociatedObject&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;
                                 &lt;span class=&#39;k&#39;&gt;@selector&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;associatedObject&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;),&lt;/span&gt;
                                 &lt;span class=&#39;n&#39;&gt;associatedObject&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt;
                                 &lt;span class=&#39;n&#39;&gt;OBJC_ASSOCIATION_RETAIN_NONATOMIC&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

    &lt;span class=&#39;k&#39;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the result looks a lot better, but the downside is that the images for the cells you quickly scroll past will only get loaded when you scroll back up, because their initial fetch request has been cancelled:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2014042703.gif&quot; alt=&quot;Image requests are cancelled&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An alternative approach is to let each queued operation finish, but associate URLs with reused cells, and only assign the fetched image if it corresponds to the last loaded URL for that cell:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;    &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;tableView&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;UITableView&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;tableView&lt;/span&gt;
             &lt;span class=&#39;nl&#39;&gt;cellForRowAtIndexPath:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSIndexPath&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;indexPath&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;n&#39;&gt;UITableViewCell&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;cell&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;tableView&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;dequeueReusableCellWithIdentifier&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;TableViewCell&amp;quot;&lt;/span&gt;
                                                                &lt;span class=&#39;nl&#39;&gt;forIndexPath:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;indexPath&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        
        &lt;span class=&#39;n&#39;&gt;cell&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;imageView&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;image&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;UIImage&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;imageNamed&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;placeholder&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
      
        &lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;url&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;imageURLs&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;indexPath&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;row&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        
        &lt;span class=&#39;n&#39;&gt;cell&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;imageView&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;associatedObject&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;url&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
        
        &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;operationManager&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;GET&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;url&lt;/span&gt;
                        &lt;span class=&#39;nl&#39;&gt;parameters:&lt;/span&gt;&lt;span class=&#39;nb&#39;&gt;nil&lt;/span&gt;
                           &lt;span class=&#39;nl&#39;&gt;success:&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;^&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;AFHTTPRequestOperation&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;operation&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;id&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;responseObject&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;([&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;cell&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;imageView&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;associatedObject&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;isEqualToString&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;url&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;])&lt;/span&gt;
            &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
                &lt;span class=&#39;n&#39;&gt;cell&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;imageView&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;image&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;responseObject&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
            &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;failure&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:^&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;AFHTTPRequestOperation&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;operation&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;NSError&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;error&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;NSLog&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;Failed with error %@.&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;error&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;);&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}];&lt;/span&gt;
        
        &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;cell&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the images for the cells you scroll past will be cached too, with the downside that loading the images for the bottom cells will be noticeably slower:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2014042704.gif&quot; alt=&quot;Image requests are queued&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Of course you can implemented more advanced strategies, e.g. pause rather than cancel requests and resume them when higher priority requests have finished. The main thing to take away is that, when you hit a wall with a convenient high-level API, you can always drop down to a lower level API and implement your own logic on top of it.&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>How to install an App Store build on your device</title>
      <link>http://cocoanuts.mobi/2014/04/03/appstore/</link>
      <pubDate>Thu, 03 Apr 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://cocoanuts.mobi/2014/04/03/appstore</guid>
      <description>&lt;p&gt;As you get close to submitting your app to the App Store, you really want your test builds to be as close as possible to the submitted binary. This is why we typically use Ad Hoc builds for our final test sessions, even when using enterprise distribution for earlier builds. But even with Ad Hoc builds, you still end up submitting a different binary, an App Store build that has never been installed on a real device. I have always felt slightly uncomfortable about this. No matter how solid your automated build system is, there always remains a tiny chance that something is wrong with your App Store build and you won’t be able to detect this before actually submitting the app.&lt;/p&gt;

&lt;p&gt;However, it turns out that you can in fact install an App Store build on a test device. We discovered this more or less by accident, while trying to explain the difference between Ad Hoc builds and App Store builds to an interested customer. At that point, the App Store build had already been submitted and approved (awaiting release), but we still worried that something might be wrong with it at first.&lt;/p&gt;

&lt;p&gt;The key to making this work is to ensure that an Ad Hoc provisioning profile is installed on the target device. This profile should reference the same bundle identifier and signing certificate that are used for the App Store build, and the list with provisioned devices should include the target device. One way to get this Ad Hoc profile on the device is to install an Ad Hoc build with the profile embedded in it, but you can also install just the profile itself. Once the Ad Hoc profile is on the device, you are ready to install your App Store build. The App Store build has its own embedded provisioning profile, with no provisioned devices in it, but apparently other compatible profiles on the device are also considered when installing a new build.&lt;/p&gt;

&lt;p&gt;Now I am pretty sure this hasn’t always been possible. Back in 2009, when I first started developing iOS apps, the rules were pretty clear: Ad Hoc builds are for testing, App Store builds are for submitting. Previous versions of the iOS App Distribution Guide included the following note:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“App Store provisioning profiles do not allow for a distribution built application to be installed on an Apple device. To install your distribution ready application on a device, you must create an Ad Hoc provisioning profile.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I could not find any reference to this note in the current version of the guide, but strictly speaking it does not contradict what is currently possible, i.e. you still need to create an Ad Hoc provisioning profile in order to install a distribution ready build. The cool thing is that this distribution ready build can be the exact same binary you submit to the App Store.&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>Reusing views in storyboards with Auto Layout</title>
      <link>http://cocoanuts.mobi/2014/03/26/reusable/</link>
      <pubDate>Wed, 26 Mar 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://cocoanuts.mobi/2014/03/26/reusable</guid>
      <description>&lt;p&gt;For the past few months, I have been working on a rather big project using storyboards and Auto Layout. This has been a great learning experience, and I think I now have a much better understanding of the pros and cons of using Interface Builder vs. pure code. Half a year ago I still &lt;a href=&quot;https://twitter.com/hverlind/status/385149347178217472&quot;&gt;assumed&lt;/a&gt; that at some point a clear winner would emerge, or at least I would end up preferring one approach over the other. But today I find myself switching between these approaches depending on the project, or even mixing them within a single project. It usually depends on subtle things like the complexity of your application flow and the inheritance relationships between your view controllers.&lt;/p&gt;

&lt;p&gt;In any case, I think being able to work with Interface Builder and Auto Layout is an important skill to have as an iOS developer. The first time you try to set up constraints for a non-trivial view hierarchy can be a frustrating experience, and your productivity will probably first take a hit when you start working with storyboards, but you end up with some valuable new tools in your belt and a much better understanding of UIKit, if nothing else. I plan to write more about this topic in the coming months, but today I would like to focus on reusable views in the context of storyboards and Auto Layout.&lt;/p&gt;

&lt;h2 id=&quot;reusing_interface_components&quot;&gt;Reusing interface components&lt;/h2&gt;

&lt;p&gt;Just like there are many patterns for code reuse, there are also different ways to reuse interface components. To start with something very basic, consider a view controller that occurs in two different flows in your application, e.g. a settings screen that is shown during the activation flow, but can also be accessed later through a navigation drawer. When both flows are defined in the same storyboard, you can lay out the common view controller inside the story board and use multiple segues to link it to the different flows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2014032401.png&quot; alt=&quot;Single storyboard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Keeping the entire flow of your application defined inside a single storyboard is not always a good idea. When the application grows and multiple developers start working on the same project, defining different flows (or subflows) in separate storyboards helps to avoid ugly merge conflicts. In this case you can define the common view controller in its own interface file and add a reference to it in the different storyboards:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2014032402.png&quot; alt=&quot;Multiple storyboards&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Often you don’t want to reuse entire screens but only certain parts of it. One approach is to use the view controller containment feature, i.e. define a view controller for each reusable view and use embed segues to link these view controllers to container views in other view controllers. Again you have the option to either lay out the view controller for the reusable view inside the storyboard itself or in a separate interface file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2014032403.png&quot; alt=&quot;View controller containment&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This approach works but in many cases feels like overkill because the additional view controllers clutter your code base and storyboards. A more lightweight way of working is to reference &lt;em&gt;views&lt;/em&gt; rather than view controllers in your storyboards and define the reusable &lt;em&gt;view&lt;/em&gt; in a separate interface file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2014032404.png&quot; alt=&quot;View containment&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the_problem&quot;&gt;The problem&lt;/h2&gt;

&lt;p&gt;When building a storyboard, Interface Builder allows you to specify the runtime class of the views and view controllers in it. This is a consistent way to link generic interface components to custom code. When the storyboard is loaded into memory, instances of the corresponding classes will be instantiated through the &lt;code&gt;initWithCoder:&lt;/code&gt; initializer. But often you want to link code to interface files in the other direction: you want to specify that an object of a certain class should be instantiated by loading the view or view controller from an interface file.&lt;/p&gt;

&lt;p&gt;In the case of a view controller, this is pretty straightforward. For a view controller that is referenced in a storyboard, it suffices to override the getter of the &lt;code&gt;nibName&lt;/code&gt; property in your view controller implementation and specify the name of the corresponding nib file:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;    &lt;span class=&#39;k&#39;&gt;@implementation&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;MyViewController&lt;/span&gt;

    &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;nibName&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;@&amp;quot;MyViewController&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

    &lt;span class=&#39;k&#39;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also override the &lt;code&gt;nibBundle&lt;/code&gt; property in case your nib file is not included in the main bundle. Alternatively, if you want to be more explicit, you can override &lt;code&gt;initWithCoder:&lt;/code&gt; with the same effect:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;    &lt;span class=&#39;k&#39;&gt;@implementation&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;MyViewController&lt;/span&gt;

    &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;instancetype&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;initWithCoder&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSCoder&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;aDecoder&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;initWithNibName&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;MyViewController&amp;quot;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;bundle&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSBundle&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;mainBundle&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]];&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

    &lt;span class=&#39;k&#39;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In fact, you don’t even need to specify the name of the nib file or the bundle here because they will default to the class name and the main bundle when you specify &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But achieving something similar for views is much less obvious. There is no &lt;code&gt;nibName&lt;/code&gt; property defined on UIView. And even if you know the name of the interface file, there may be multiple views defined inside it and you cannot rely on the File’s Owner to resolve this like you can with view controllers.&lt;/p&gt;

&lt;h2 id=&quot;resolving_the_roadblocks&quot;&gt;Resolving the roadblocks&lt;/h2&gt;

&lt;p&gt;If you adopt the convention that the first view defined inside the nib is the one you are interested in, you might be tempted to write something like this:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;    &lt;span class=&#39;k&#39;&gt;@implementation&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;MyView&lt;/span&gt;

    &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;instancetype&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;initWithCoder&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSCoder&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;aDecoder&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;n&#39;&gt;NSBundle&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;mainBundle&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSBundle&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;mainBundle&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        &lt;span class=&#39;n&#39;&gt;NSArray&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedViews&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;mainBundle&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;loadNibNamed&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;MyView&amp;quot;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;owner&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;nb&#39;&gt;nil&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;options&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;nb&#39;&gt;nil&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedViews&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;firstObject&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

    &lt;span class=&#39;k&#39;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unfortunately, the above code results in an infinite loop. When &lt;code&gt;initWithCoder:&lt;/code&gt; is first called, the nib is unarchived, but the view inside it is instantiated through the &lt;code&gt;initWithCoder:&lt;/code&gt; method, which loads the nib again, etc. I first tried to work around this by calling the super class initializer and checking the amount of subviews afterwards. If there are no subviews, the view is a placeholder view referenced from a storyboard and should be loaded from the nib instead. But if there are subviews, the view has been loaded from the nib already and the recursion should stop:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;    &lt;span class=&#39;k&#39;&gt;@implementation&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;MyView&lt;/span&gt;

    &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;instancetype&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;initWithCoder&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSCoder&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;aDecoder&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;super&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;initWithCoder&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;aDecoder&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;!&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;subviews&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;count&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;])&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;NSBundle&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;mainBundle&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSBundle&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;mainBundle&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;NSArray&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedViews&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;mainBundle&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;loadNibNamed&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;MyView&amp;quot;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;owner&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;nb&#39;&gt;nil&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;options&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;nb&#39;&gt;nil&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedViews&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;firstObject&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

    &lt;span class=&#39;k&#39;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When I tried this, the app crashed with an uncaught exception “This coder requires that replaced objects be returned from initWithCoder:”. It took me a while to figure this one out, but eventually I stumbled on a method in &lt;code&gt;NSObject&lt;/code&gt; called &lt;code&gt;awakeAfterUsingCoder:&lt;/code&gt; (not to be confused with &lt;code&gt;awakeFromNib&lt;/code&gt;), which is called after &lt;code&gt;initWithCoder:&lt;/code&gt; and allows you to substitute another object in place of the object that was decoded. So this is more or less what we were looking for:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;    &lt;span class=&#39;k&#39;&gt;@implementation&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;MyView&lt;/span&gt;

    &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;id&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;awakeAfterUsingCoder&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSCoder&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;aDecoder&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;!&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;subviews&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;count&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;])&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;NSBundle&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;mainBundle&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSBundle&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;mainBundle&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;NSArray&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedViews&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;mainBundle&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;loadNibNamed&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;MyView&amp;quot;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;owner&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;nb&#39;&gt;nil&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;options&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;nb&#39;&gt;nil&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
            &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedViews&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;firstObject&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

    &lt;span class=&#39;k&#39;&gt;@end&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;dealing_with_constraints&quot;&gt;Dealing with constraints&lt;/h2&gt;

&lt;p&gt;So far, so good. We can now add placeholder views to a storyboard, set their class in the identity inspector, and dynamically replace those placeholders with actual content loaded from nib files, without breaking the view outlets in the storyboard. One problem that remains is that, without any precautions, we lose any view properties that depend on the context inside the storyboard. In order to solve this, we need to transfer the frame and the layout constraints from the placeholder view to the view that was loaded from the nib file, so the end result might look something like this:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;    &lt;span class=&#39;k&#39;&gt;@implementation&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;MyView&lt;/span&gt;

    &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;id&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;awakeAfterUsingCoder&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSCoder&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;aDecoder&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;!&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;subviews&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;count&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;])&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;NSBundle&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;mainBundle&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSBundle&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;mainBundle&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;NSArray&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedViews&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;mainBundle&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;loadNibNamed&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;MyView&amp;quot;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;owner&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;nb&#39;&gt;nil&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;options&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;nb&#39;&gt;nil&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;MyView&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedView&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedViews&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;firstObject&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
            
            &lt;span class=&#39;n&#39;&gt;loadedView&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;frame&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;frame&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;loadedView&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;autoresizingMask&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;autoresizingMask&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;loadedView&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;translatesAutoresizingMaskIntoConstraints&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;
                &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;translatesAutoresizingMaskIntoConstraints&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
            
            &lt;span class=&#39;k&#39;&gt;for&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSLayoutConstraint&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;constraint&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;in&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;constraints&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
            &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
                &lt;span class=&#39;kt&#39;&gt;id&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;firstItem&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;constraint&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;firstItem&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
                &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;firstItem&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;==&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
                &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
                    &lt;span class=&#39;n&#39;&gt;firstItem&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;loadedView&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
                &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
                &lt;span class=&#39;kt&#39;&gt;id&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;secondItem&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;constraint&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;secondItem&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
                &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;secondItem&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;==&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
                &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
                    &lt;span class=&#39;n&#39;&gt;secondItem&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;loadedView&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
                &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
                &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedView&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;addConstraint&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;
                    &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSLayoutConstraint&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;constraintWithItem&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;firstItem&lt;/span&gt;
                                                 &lt;span class=&#39;nl&#39;&gt;attribute:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;constraint&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;firstAttribute&lt;/span&gt;
                                                 &lt;span class=&#39;nl&#39;&gt;relatedBy:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;constraint&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;relation&lt;/span&gt;
                                                    &lt;span class=&#39;nl&#39;&gt;toItem:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;secondItem&lt;/span&gt;
                                                 &lt;span class=&#39;nl&#39;&gt;attribute:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;constraint&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;secondAttribute&lt;/span&gt;
                                                &lt;span class=&#39;nl&#39;&gt;multiplier:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;constraint&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;multiplier&lt;/span&gt;
                                                  &lt;span class=&#39;nl&#39;&gt;constant:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;constraint&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;constant&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]];&lt;/span&gt;
            &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
            
            &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;loadedView&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

    &lt;span class=&#39;k&#39;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now this is quite a bit of boilerplate code, so you probably want to move it to a category on UIView or something like that so your &lt;code&gt;awakeAfterUsingCoder:&lt;/code&gt; implementation can be reduced to a one-liner.&lt;/p&gt;

&lt;h2 id=&quot;intrinsic_size_of_placeholder_views&quot;&gt;Intrinsic size of placeholder views&lt;/h2&gt;

&lt;p&gt;For components like labels and image views, the intrinsic size can be determined at runtime based on the content. Because of this, Auto Layout does not require you to fully constrain the width and height of these views. Custom views defined in a nib file may also be able to determine their intrinsic size dynamically, but when you add a placeholder view to a view controller in a storyboard, you need to consider this explicitly or Auto Layout will complain about missing constraints. Fortunately there is a dropdown in the Size inspector that allows you to specify that a view is just a placeholder and the width or height will be determined at runtime, when the placeholder has been replaced with actual content:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2014032405.png&quot; alt=&quot;Specifying placeholder views&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;an_alternative_approach&quot;&gt;An alternative approach&lt;/h2&gt;

&lt;p&gt;So far we have assumed that the reusable view is defined as the first top-level object in the interface file. An alternative approach is to set the File’s Owner of the interface file to the reusable view class, and to consider the first top-level object in the interface file to be a subview of the reusable view that contains all the other subviews. Outlets can be linked to the File’s Owner rather than to the top-level (sub)view. This breaks the infinite &lt;code&gt;initWithCoder:&lt;/code&gt; loop so you don’t need to rely on &lt;code&gt;awakeAfterUsingCoder:&lt;/code&gt;. Instead of replacing the placeholder view, you are adding the subview loaded from the nib file to it. The advantage is that you don’t lose the context dependent view properties of the placeholder. However, in the case of Auto Layout, you still need to ensure that appropriate constraints are applied to the added subview:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;    &lt;span class=&#39;k&#39;&gt;@implementation&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;MyView&lt;/span&gt;

    &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;instancetype&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;initWithCoder&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSCoder&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;aDecoder&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;super&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;initWithCoder&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;aDecoder&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;NSBundle&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;mainBundle&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSBundle&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;mainBundle&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;NSArray&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedViews&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;mainBundle&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;loadNibNamed&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;MyView&amp;quot;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;owner&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;options&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;nb&#39;&gt;nil&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;MyView&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedSubview&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedViews&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;firstObject&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
            
            &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;addSubview&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedSubview&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
            
            &lt;span class=&#39;n&#39;&gt;loadedSubview&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;translatesAutoresizingMaskIntoConstraints&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;NO&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
            
            &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;addConstraint&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;pin&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedSubview&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;attribute&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSLayoutAttributeTop&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]];&lt;/span&gt;
            &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;addConstraint&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;pin&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedSubview&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;attribute&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSLayoutAttributeLeft&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]];&lt;/span&gt;
            &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;addConstraint&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;pin&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedSubview&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;attribute&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSLayoutAttributeBottom&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]];&lt;/span&gt;
            &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;addConstraint&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;pin&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedSubview&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;attribute&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSLayoutAttributeRight&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]];&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

    &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSLayoutConstraint&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;pin&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;id&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;item&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;attribute&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSLayoutAttribute&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;attribute&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSLayoutConstraint&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;constraintWithItem&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;
                                            &lt;span class=&#39;nl&#39;&gt;attribute:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;attribute&lt;/span&gt;
                                            &lt;span class=&#39;nl&#39;&gt;relatedBy:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSLayoutRelationEqual&lt;/span&gt;
                                               &lt;span class=&#39;nl&#39;&gt;toItem:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;item&lt;/span&gt;
                                            &lt;span class=&#39;nl&#39;&gt;attribute:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;attribute&lt;/span&gt;
                                           &lt;span class=&#39;nl&#39;&gt;multiplier:&lt;/span&gt;&lt;span class=&#39;mf&#39;&gt;1.0&lt;/span&gt;
                                             &lt;span class=&#39;nl&#39;&gt;constant:&lt;/span&gt;&lt;span class=&#39;mf&#39;&gt;0.0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

    &lt;span class=&#39;k&#39;&gt;@end&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;bottom_line&quot;&gt;Bottom line&lt;/h2&gt;

&lt;p&gt;As your project grows, being able to reuse interface components becomes gradually more important. Because of this, it is worth investing some effort right at the start to develop some generic reuse strategies that cover the edge cases. I still hope that future versions of Xcode will make it easier to reuse views in storyboards, but for now I manage to get by with some common UIView categories.&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>First impressions of ReactiveCocoa</title>
      <link>http://cocoanuts.mobi/2014/03/19/functional/</link>
      <pubDate>Wed, 19 Mar 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://cocoanuts.mobi/2014/03/19/functional</guid>
      <description>&lt;p&gt;Earlier this month I was in Amsterdam to talk at &lt;a href=&quot;http://mdevcon.com&quot;&gt;mdevcon&lt;/a&gt;. Right before I went up on stage, I watched &lt;a href=&quot;http://ashfurrow.com&quot;&gt;Ash Furrow&lt;/a&gt;’s introduction to &lt;a href=&quot;https://github.com/ReactiveCocoa/ReactiveCocoa&quot;&gt;ReactiveCocoa&lt;/a&gt;. I had been looking forward to learn more about this framework ever since I first heard about it. The talk was inspiring, and I bought &lt;a href=&quot;https://leanpub.com/iosfrp&quot;&gt;the book&lt;/a&gt; the next day, but now we are two weeks later and I’m still not sure what to really think of it.&lt;/p&gt;

&lt;p&gt;To be clear, I have always been a fan of functional programming. I spent most of my last year at university writing an XML editor in Haskell, using &lt;a href=&quot;http://conal.net/fran/&quot;&gt;Functional Reactive Animation&lt;/a&gt; for the UI. And although I have never used a purely functional programming language in my professional life as a software developer, I have often experienced how applying functional concepts in imperative programming languages produces code that is more easy to read, understand and maintain.&lt;/p&gt;

&lt;p&gt;Back in my C++ days, I was taught to liberally use &lt;code&gt;boost::bind&lt;/code&gt; and friends. Later on, as a .NET developer, I loved to refactor C# code using LINQ operators. And of course, in Objective-C we now have blocks, so I tend to use &lt;code&gt;enumerateObjectsUsingBlock&lt;/code&gt;, &lt;code&gt;sortedArrayUsingComparator&lt;/code&gt; and &lt;code&gt;filteredArrayUsingPredicate&lt;/code&gt; whenever I can.&lt;/p&gt;

&lt;p&gt;Now I think we can all agree that blocks are not the end-all solution to writing declarative code in Objective-C. In fact, the thing I missed most when switching from C# was the ability to chain higher-order functions to filter, map and fold collections with lazy evaluation, like you can with the &lt;code&gt;Where&lt;/code&gt;, &lt;code&gt;Select&lt;/code&gt; and &lt;code&gt;Aggregate&lt;/code&gt; operators from LINQ.&lt;/p&gt;

&lt;p&gt;Fortunately, Objective-C libraries exist that offer exactly this functionality. &lt;a href=&quot;https://github.com/robrix/RXCollections&quot;&gt;RXCollections&lt;/a&gt; is one such library, and it is used in Ash Furrow’s book to dip the readers’ feet into the FRP water. A similar library is &lt;a href=&quot;http://underscorem.org&quot;&gt;Underscore.m&lt;/a&gt; (inspired by &lt;a href=&quot;http://underscorejs.org&quot;&gt;underscore.js&lt;/a&gt;), which can be used like this to calculate the longest common number prefix in a set of strings:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;    &lt;span class=&#39;n&#39;&gt;NSArray&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;inputStrings&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;@[&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;@&amp;quot;67034X&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;@&amp;quot;67039XXX&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;@&amp;quot;XX&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;@&amp;quot;6704&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;@&amp;quot;67004&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;@&amp;quot;670X&amp;quot;&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;

    &lt;span class=&#39;n&#39;&gt;NSCharacterSet&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;nonDigits&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSCharacterSet&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;decimalDigitCharacterSet&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;invertedSet&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;

    &lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;commonPrefix&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;Underscore&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;array&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;inputStrings&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;map&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;^&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;value&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
           &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;value&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;stringByTrimmingCharactersInSet&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;nonDigits&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;})&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;filter&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;^&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;BOOL&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;value&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
           &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;value&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;length&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;})&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;reduce&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nb&#39;&gt;nil&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;^&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;accumulator&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;value&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
           &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;accumulator&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;?&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;accumulator&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;commonPrefixWithString&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;value&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;options&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;value&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;});&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;// yields @&amp;quot;670”&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code is powerful and elegant at the same time, and it is a typical example of how using functionals in an imperative context can lead to clearer code. In fact you can accomplish the exact same thing in ReactiveCocoa with an &lt;code&gt;RACSequence&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;    &lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;commonPrefix&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[[[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;inputStrings&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;rac_sequence&lt;/span&gt;
        &lt;span class=&#39;nl&#39;&gt;map:&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;^&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;value&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
           &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;value&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;stringByTrimmingCharactersInSet&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;nonDigits&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}]&lt;/span&gt;
        &lt;span class=&#39;nl&#39;&gt;filter:&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;^&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;BOOL&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;value&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
           &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;value&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;length&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}]&lt;/span&gt;
        &lt;span class=&#39;nl&#39;&gt;foldLeftWithStart:&lt;/span&gt;&lt;span class=&#39;nb&#39;&gt;nil&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;reduce&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:^&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;accumulator&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;value&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
           &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;accumulator&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;?&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;accumulator&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;commonPrefixWithString&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;value&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;options&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;value&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But of course ReactiveCocoa is a lot more ambitious than this. Introducing Functional Reactive Programming in your code requires a real paradigm shift and forces you to rethink what programs, inputs and outputs really are. I do like the premise of FRP, and some of the ReactiveCocoa examples (e.g. chaining dependent network requests) look very convincing to me, but I am still wondering to what extent this can be applied in real life projects.&lt;/p&gt;

&lt;p&gt;For starters, it seems that quite a bit of boilerplate code is needed to lift the behavior of existing classes to the FRP signal space. For common UI components like buttons and switches, this functionality is provided through built in categories, e.g. there is an &lt;code&gt;RACSignalSupport&lt;/code&gt; category on &lt;code&gt;UITextField&lt;/code&gt; that defines an &lt;code&gt;rac_textSignal&lt;/code&gt;. If you want to use other classes with ReactiveCocoa, you will need to do the lifting yourself.&lt;/p&gt;

&lt;p&gt;Since I’ve been working a lot with iBeacons lately, I thought it might be a good idea to try and rewrite some of that code using ReactiveCocoa. After all, we are constantly talking about beacon &lt;em&gt;signals&lt;/em&gt;, so I expected this to be a good match for FRP. In an imperative context, you request an instance of the &lt;code&gt;CLLocationManager&lt;/code&gt; class to start ranging beacons in a certain region, and you observe the results by implementing the corresponding delegate method. Using ReactiveCocoa, this is the code I came up with to turn the observed beacon data into an &lt;code&gt;RACSignal&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;    &lt;span class=&#39;n&#39;&gt;RACRangeSignal&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;rangeSignal&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; 
        &lt;span class=&#39;p&#39;&gt;[[[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;rac_signalForSelector&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;@selector&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;locationManager&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;didRangeBeacons&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;inRegion&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
                         &lt;span class=&#39;nl&#39;&gt;fromProtocol:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;@&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;protocol&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;CLLocationManagerDelegate&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)]&lt;/span&gt;
        &lt;span class=&#39;nl&#39;&gt;reduceEach:&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;^&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;CLLocationManager&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;manager&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;NSArray&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;beacons&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;CLRegion&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;region&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;beacons&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;rac_sequence&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;signal&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}]&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;concat&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now I might be missing some subtle ReactiveCocoa shortcuts that would allow me to write this in a more elegant way, and maybe this isn’t such a good use case for FRP after all, but an example like this one won’t exactly help to convince my co-workers (or even myself) to start using ReactiveCocoa in large scale projects.&lt;/p&gt;

&lt;p&gt;Don’t get me wrong. I think ReactiveCocoa is pretty cool. I certainly like it better than &lt;a href=&quot;http://blog.metaobject.com/2014/03/the-siren-call-of-kvo-and-cocoa-bindings.html&quot;&gt;KVO and bindings&lt;/a&gt;. But it’s also a pretty big step. Maybe I just need a bit more time and practice. Or maybe I should start small by applying it to very restricted subsets of projects. And in the meantime, I’ll keep trying to convince my colleagues to adopt block based syntax and higher order functionals.&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>And so it begins...</title>
      <link>http://cocoanuts.mobi/2014/03/16/webdev/</link>
      <pubDate>Sun, 16 Mar 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://cocoanuts.mobi/2014/03/16/webdev</guid>
      <description>&lt;p&gt;I’ll admit it, I have never been much of a web developer. Sure, I once built a website, somewhere around the start of the century. It included a guestbook, a visitor counter and a LED ticker display. It was hosted on a free .tk domain. You get the idea. But ever since things got a bit more serious, I mostly stayed away from web development.&lt;/p&gt;

&lt;p&gt;I once used to blog as well. At a previous company I worked for, I contributed to the technical blog once a month for three years straight. But I never had a personal blog before. My main excuse has always been that I don’t want to deal with the overhead of building a website and keeping it alive. I have considered blogging on a platform like &lt;a href=&quot;http://medium.com&quot;&gt;Medium&lt;/a&gt;, but I tend to agree with &lt;a href=&quot;http://www.hanselman.com/blog/YourWordsAreWasted.aspx&quot;&gt;Scott Hanselman&lt;/a&gt;, who claims that as a developer, not only should you have your own blog, but you should also buy your own domain in order to keep control over your content.&lt;/p&gt;

&lt;p&gt;So what changed? Two things. First, I came across this post by &lt;a href=&quot;http://unicornfree.com/2014/dont-fave-this-post-how-to-really-launch-in-2014&quot;&gt;Amy Hoy&lt;/a&gt;. Her advice to just start small – one tiny step after another – may sound pretty obvious, but it was still a bit of a wake up call for me. Second, I recently realized just how much web development has matured over the past few years and how easy it has become to set up, deploy and maintain something like a static blog site.&lt;/p&gt;

&lt;p&gt;You don’t need to know any Ruby to install gems like &lt;a href=&quot;http://middlemanapp.com&quot;&gt;Middleman&lt;/a&gt; or &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;. You just play around with some open source templates until you find something you like. You link your domain to &lt;a href=&quot;http://pages.github.com&quot;&gt;GitHub Pages&lt;/a&gt; and you can be up and running in a matter of minutes. Call me old-fashioned, but I think there’s something quite magical about being able to deploy a website simply by typing git push.&lt;/p&gt;

&lt;p&gt;So here you have it. A first tiny step. The beginning of something. No promises about frequent updates. No begging to subscribe to my RSS feed. But no more excuses either.&lt;/p&gt;</description>
    </item>
    
    

  </channel> 
</rss>