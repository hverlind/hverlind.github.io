<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>http://cocoanuts.mobi</link>
    <atom:link href="http://cocoanuts.mobi/feed.xml" rel="self" type="application/rss+xml" />
    <description></description>
    <language>en-us</language>
    <pubDate>Wed, 26 Mar 2014 21:40:10 +0000</pubDate>
    <lastBuildDate>Wed, 26 Mar 2014 21:40:10 +0000</lastBuildDate>

    
    
    <item>
      <title>Reusing views in storyboards with Auto Layout</title>
      <link>http://cocoanuts.mobi/2014/03/26/reusable/</link>
      <pubDate>Wed, 26 Mar 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://cocoanuts.mobi/2014/03/26/reusable</guid>
      <description>&lt;p&gt;For the past few months, I have been working on a rather big project using storyboards and Auto Layout. This has been a great learning experience, and I think I now have a much better understanding of the pros and cons of using Interface Builder vs. pure code. Half a year ago I still &lt;a href=&quot;https://twitter.com/hverlind/status/385149347178217472&quot;&gt;assumed&lt;/a&gt; that at some point a clear winner would emerge, or at least I would end up preferring one approach over the other. But today I find myself switching between these approaches depending on the project, or even mixing them within a single project. It usually depends on subtle things like the complexity of your application flow and the inheritance relationships between your view controllers.&lt;/p&gt;

&lt;p&gt;In any case, I think being able to work with Interface Builder and Auto Layout is an important skill to have as an iOS developer. The first time you try to set up constraints for a non-trivial view hierarchy can be a frustrating experience, and your productivity will probably first take a hit when you start working with storyboards, but you end up with some valuable new tools in your belt and a much better understanding of UIKit, if nothing else. I plan to write more about this topic in the coming months, but today I would like to focus on reusable views in the context of storyboards and Auto Layout.&lt;/p&gt;

&lt;h2 id=&quot;reusing_interface_components&quot;&gt;Reusing interface components&lt;/h2&gt;

&lt;p&gt;Just like there are many patterns for code reuse, there are also different ways to reuse interface components. To start with something very basic, consider a view controller that occurs in two different flows in your application, e.g. a settings screen that is shown during the activation flow, but can also be accessed later through a navigation drawer. When both flows are defined in the same storyboard, you can lay out the common view controller inside the story board and use multiple segues to link it to the different flows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/images/2014032401.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;Keeping the entire flow of your application defined inside a single storyboard is not always a good idea. When the application grows and multiple developers start working on the same project, defining different flows (or subflows) in separate storyboards helps to avoid ugly merge conflicts. In this case you can define the common view controller in its own interface file and add a reference to it in the different storyboards:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/images/2014032402.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;Often you don’t want to reuse entire screens but only certain parts of it. One approach is to use the view controller containment feature, i.e. define a view controller for each reusable view and use embed segues to link these view controllers to container views in other view controllers. Again you have the option to either lay out the view controller for the reusable view inside the storyboard itself or in a separate interface file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/images/2014032403.png&#39; /&gt;&lt;/p&gt;

&lt;p&gt;This approach works but in many cases feels like overkill because the additional view controllers clutter your code base and storyboards. A more lightweight way of working is to reference &lt;em&gt;views&lt;/em&gt; rather than view controllers in your storyboards and define the reusable &lt;em&gt;view&lt;/em&gt; in a separate interface file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/images/2014032404.png&#39; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the_problem&quot;&gt;The problem&lt;/h2&gt;

&lt;p&gt;When building a storyboard, Interface Builder allows you to specify the runtime class of the views and view controllers in it. This is a consistent way to link generic interface components to custom code. When the storyboard is loaded into memory, instances of the corresponding classes will be instantiated through the &lt;code&gt;initWithCoder:&lt;/code&gt; initializer. But often you want to link code to interface files in the other direction: you want to specify that an object of a certain class should be instantiated by loading the view or view controller from an interface file.&lt;/p&gt;

&lt;p&gt;In the case of a view controller, this is pretty straightforward. For a view controller that is referenced in a storyboard, it suffices to override the getter of the &lt;code&gt;nibName&lt;/code&gt; property in your view controller implementation and specify the name of the corresponding nib file:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;    &lt;span class=&#39;k&#39;&gt;@implementation&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;MyViewController&lt;/span&gt;

    &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;nibName&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;@&amp;quot;MyViewController&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

    &lt;span class=&#39;k&#39;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also override the &lt;code&gt;nibBundle&lt;/code&gt; property in case your nib file is not included in the main bundle. Alternatively, if you want to be more explicit, you can override &lt;code&gt;initWithCoder:&lt;/code&gt; with the same effect:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;    &lt;span class=&#39;k&#39;&gt;@implementation&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;MyViewController&lt;/span&gt;

    &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;instancetype&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;initWithCoder&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSCoder&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;aDecoder&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;initWithNibName&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;MyViewController&amp;quot;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;bundle&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSBundle&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;mainBundle&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]];&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

    &lt;span class=&#39;k&#39;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In fact, you don’t even need to specify the name of the nib file or the bundle here because they will default to the class name and the main bundle when you specify &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But achieving something similar for views is much less obvious. There is no &lt;code&gt;nibName&lt;/code&gt; property defined on UIView. And even if you know the name of the interface file, there may be multiple views defined inside it and you cannot rely on the File’s Owner to resolve this like you can with view controllers.&lt;/p&gt;

&lt;h2 id=&quot;resolving_the_roadblocks&quot;&gt;Resolving the roadblocks&lt;/h2&gt;

&lt;p&gt;If you adopt the convention that the first view defined inside the nib is the one you are interested in, you might be tempted to write something like this:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;    &lt;span class=&#39;k&#39;&gt;@implementation&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;MyView&lt;/span&gt;

    &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;instancetype&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;initWithCoder&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSCoder&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;aDecoder&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;n&#39;&gt;NSBundle&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;mainBundle&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSBundle&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;mainBundle&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        &lt;span class=&#39;n&#39;&gt;NSArray&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedViews&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;mainBundle&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;loadNibNamed&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;MyView&amp;quot;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;owner&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;nb&#39;&gt;nil&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;options&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;nb&#39;&gt;nil&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedViews&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;firstObject&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

    &lt;span class=&#39;k&#39;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unfortunately, the above code results in an infinite loop. When &lt;code&gt;initWithCoder:&lt;/code&gt; is first called, the nib is unarchived, but the view inside it is instantiated through the &lt;code&gt;initWithCoder:&lt;/code&gt; method, which loads the nib again, etc. I first tried to work around this by calling the super class initializer and checking the amount of subviews afterwards. If there are no subviews, the view is a placeholder view referenced from a storyboard and should be loaded from the nib instead. But if there are subviews, the view has been loaded from the nib already and the recursion should stop:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;    &lt;span class=&#39;k&#39;&gt;@implementation&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;MyView&lt;/span&gt;

    &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;instancetype&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;initWithCoder&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSCoder&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;aDecoder&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;super&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;initWithCoder&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;aDecoder&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;!&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;subviews&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;count&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;])&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;NSBundle&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;mainBundle&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSBundle&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;mainBundle&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;NSArray&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedViews&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;mainBundle&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;loadNibNamed&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;MyView&amp;quot;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;owner&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;nb&#39;&gt;nil&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;options&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;nb&#39;&gt;nil&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedViews&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;firstObject&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

    &lt;span class=&#39;k&#39;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When I tried this, the app crashed with an uncaught exception “This coder requires that replaced objects be returned from initWithCoder:”. It took me a while to figure this one out, but eventually I stumbled on a method in &lt;code&gt;NSObject&lt;/code&gt; called &lt;code&gt;awakeAfterUsingCoder:&lt;/code&gt; (not to be confused with &lt;code&gt;awakeFromNib&lt;/code&gt;), which is called after &lt;code&gt;initWithCoder:&lt;/code&gt; and allows you to substitute another object in place of the object that was decoded. So this is more or less what we were looking for:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;    &lt;span class=&#39;k&#39;&gt;@implementation&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;MyView&lt;/span&gt;

    &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;id&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;awakeAfterUsingCoder&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSCoder&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;aDecoder&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;!&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;subviews&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;count&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;])&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;NSBundle&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;mainBundle&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSBundle&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;mainBundle&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;NSArray&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedViews&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;mainBundle&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;loadNibNamed&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;MyView&amp;quot;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;owner&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;nb&#39;&gt;nil&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;options&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;nb&#39;&gt;nil&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
            &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedViews&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;firstObject&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

    &lt;span class=&#39;k&#39;&gt;@end&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;dealing_with_constraints&quot;&gt;Dealing with constraints&lt;/h2&gt;

&lt;p&gt;So far, so good. We can now add placeholder views to a storyboard, set their class in the identity inspector, and dynamically replace those placeholders with actual content loaded from nib files, without breaking the view outlets in the storyboard. One problem that remains is that, without any precautions, we lose any view properties that depend on the context inside the storyboard. In order to solve this, we need to transfer the frame and the layout constraints from the placeholder view to the view that was loaded from the nib file, so the end result might look something like this:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;    &lt;span class=&#39;k&#39;&gt;@implementation&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;MyView&lt;/span&gt;

    &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;id&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;awakeAfterUsingCoder&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSCoder&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;aDecoder&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;!&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;subviews&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;count&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;])&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;NSBundle&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;mainBundle&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSBundle&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;mainBundle&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;NSArray&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedViews&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;mainBundle&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;loadNibNamed&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;MyView&amp;quot;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;owner&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;nb&#39;&gt;nil&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;options&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;nb&#39;&gt;nil&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;MyView&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedView&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedViews&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;firstObject&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
            
            &lt;span class=&#39;n&#39;&gt;loadedView&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;frame&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;frame&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;loadedView&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;autoresizingMask&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;autoresizingMask&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;loadedView&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;translatesAutoresizingMaskIntoConstraints&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;
                &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;translatesAutoresizingMaskIntoConstraints&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
            
            &lt;span class=&#39;k&#39;&gt;for&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSLayoutConstraint&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;constraint&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;in&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;constraints&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
            &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
                &lt;span class=&#39;kt&#39;&gt;id&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;firstItem&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;constraint&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;firstItem&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
                &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;firstItem&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;==&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
                &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
                    &lt;span class=&#39;n&#39;&gt;firstItem&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;loadedView&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
                &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
                &lt;span class=&#39;kt&#39;&gt;id&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;secondItem&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;constraint&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;secondItem&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
                &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;secondItem&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;==&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
                &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
                    &lt;span class=&#39;n&#39;&gt;secondItem&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;loadedView&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
                &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
                &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedView&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;addConstraint&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;
                    &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSLayoutConstraint&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;constraintWithItem&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;firstItem&lt;/span&gt;
                                                 &lt;span class=&#39;nl&#39;&gt;attribute:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;constraint&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;firstAttribute&lt;/span&gt;
                                                 &lt;span class=&#39;nl&#39;&gt;relatedBy:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;constraint&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;relation&lt;/span&gt;
                                                    &lt;span class=&#39;nl&#39;&gt;toItem:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;secondItem&lt;/span&gt;
                                                 &lt;span class=&#39;nl&#39;&gt;attribute:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;constraint&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;secondAttribute&lt;/span&gt;
                                                &lt;span class=&#39;nl&#39;&gt;multiplier:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;constraint&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;multiplier&lt;/span&gt;
                                                  &lt;span class=&#39;nl&#39;&gt;constant:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;constraint&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;constant&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]];&lt;/span&gt;
            &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
            
            &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;loadedView&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

    &lt;span class=&#39;k&#39;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now this is quite a bit of boilerplate code, so you probably want to move it to a category on UIView or something like that so your &lt;code&gt;awakeAfterUsingCoder:&lt;/code&gt; implementation can be reduced to a one-liner.&lt;/p&gt;

&lt;h2 id=&quot;intrinsic_size_of_placeholder_views&quot;&gt;Intrinsic size of placeholder views&lt;/h2&gt;

&lt;p&gt;For components like labels and image views, the intrinsic size can be determined at runtime based on the content. Because of this, Auto Layout does not require you to fully constrain the width and height of these views. Custom views defined in a nib file may also be able to determine their intrinsic size dynamically, but when you add a placeholder view to a view controller in a storyboard, you need to consider this explicitly or Auto Layout will complain about missing constraints. Fortunately there is a dropdown in the Size inspector that allows you to specify that a view is just a placeholder and the width or height will be determined at runtime, when the placeholder has been replaced with actual content:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;/images/2014032405.png&#39; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;an_alternative_approach&quot;&gt;An alternative approach&lt;/h2&gt;

&lt;p&gt;So far we have assumed that the reusable view is defined as the first top-level object in the interface file. An alternative approach is to set the File’s Owner of the interface file to the reusable view class, and to consider the first top-level object in the interface file to be a subview of the reusable view that contains all the other subviews. Outlets can be linked to the File’s Owner rather than to the top-level (sub)view. This breaks the infinite &lt;code&gt;initWithCoder:&lt;/code&gt; loop so you don’t need to rely on &lt;code&gt;awakeAfterUsingCoder:&lt;/code&gt;. Instead of replacing the placeholder view, you are adding the subview loaded from the nib file to it. The advantage is that you don’t lose the context dependent view properties of the placeholder. However, in the case of Auto Layout, you still need to ensure that appropriate constraints are applied to the added subview:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;    &lt;span class=&#39;k&#39;&gt;@implementation&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;MyView&lt;/span&gt;

    &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;instancetype&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;initWithCoder&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSCoder&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;aDecoder&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;super&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;initWithCoder&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;aDecoder&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;NSBundle&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;mainBundle&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSBundle&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;mainBundle&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;NSArray&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedViews&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;mainBundle&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;loadNibNamed&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;@&amp;quot;MyView&amp;quot;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;owner&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;options&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;nb&#39;&gt;nil&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
            &lt;span class=&#39;n&#39;&gt;MyView&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedSubview&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedViews&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;firstObject&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
            
            &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;addSubview&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedSubview&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
            
            &lt;span class=&#39;n&#39;&gt;loadedSubview&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;translatesAutoresizingMaskIntoConstraints&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;NO&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
            
            &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;addConstraint&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;pin&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedSubview&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;attribute&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSLayoutAttributeTop&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]];&lt;/span&gt;
            &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;addConstraint&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;pin&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedSubview&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;attribute&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSLayoutAttributeLeft&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]];&lt;/span&gt;
            &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;addConstraint&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;pin&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedSubview&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;attribute&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSLayoutAttributeBottom&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]];&lt;/span&gt;
            &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;addConstraint&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;pin&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;loadedSubview&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;attribute&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSLayoutAttributeRight&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]];&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

    &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSLayoutConstraint&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;pin&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;id&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;item&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;attribute&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSLayoutAttribute&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;attribute&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSLayoutConstraint&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;constraintWithItem&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt;
                                            &lt;span class=&#39;nl&#39;&gt;attribute:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;attribute&lt;/span&gt;
                                            &lt;span class=&#39;nl&#39;&gt;relatedBy:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSLayoutRelationEqual&lt;/span&gt;
                                               &lt;span class=&#39;nl&#39;&gt;toItem:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;item&lt;/span&gt;
                                            &lt;span class=&#39;nl&#39;&gt;attribute:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;attribute&lt;/span&gt;
                                           &lt;span class=&#39;nl&#39;&gt;multiplier:&lt;/span&gt;&lt;span class=&#39;mf&#39;&gt;1.0&lt;/span&gt;
                                             &lt;span class=&#39;nl&#39;&gt;constant:&lt;/span&gt;&lt;span class=&#39;mf&#39;&gt;0.0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
    &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;

    &lt;span class=&#39;k&#39;&gt;@end&lt;/span&gt;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;bottom_line&quot;&gt;Bottom line&lt;/h2&gt;

&lt;p&gt;As your project grows, being able to reuse interface components becomes gradually more important. Because of this, it is worth investing some effort right at the start to develop some generic reuse strategies that cover the edge cases. I still hope that future versions of Xcode will make it easier to reuse views in storyboards, but for now I manage to get by with some common UIView categories.&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>First impressions of ReactiveCocoa</title>
      <link>http://cocoanuts.mobi/2014/03/19/functional/</link>
      <pubDate>Wed, 19 Mar 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://cocoanuts.mobi/2014/03/19/functional</guid>
      <description>&lt;p&gt;Earlier this month I was in Amsterdam to talk at &lt;a href=&quot;http://mdevcon.com&quot;&gt;mdevcon&lt;/a&gt;. Right before I went up on stage, I watched &lt;a href=&quot;http://ashfurrow.com&quot;&gt;Ash Furrow&lt;/a&gt;’s introduction to &lt;a href=&quot;https://github.com/ReactiveCocoa/ReactiveCocoa&quot;&gt;ReactiveCocoa&lt;/a&gt;. I had been looking forward to learn more about this framework ever since I first heard about it. The talk was inspiring, and I bought &lt;a href=&quot;https://leanpub.com/iosfrp&quot;&gt;the book&lt;/a&gt; the next day, but now we are two weeks later and I’m still not sure what to really think of it.&lt;/p&gt;

&lt;p&gt;To be clear, I have always been a fan of functional programming. I spent most of my last year at university writing an XML editor in Haskell, using &lt;a href=&quot;http://conal.net/fran/&quot;&gt;Functional Reactive Animation&lt;/a&gt; for the UI. And although I have never used a purely functional programming language in my professional life as a software developer, I have often experienced how applying functional concepts in imperative programming languages produces code that is more easy to read, understand and maintain.&lt;/p&gt;

&lt;p&gt;Back in my C++ days, I was taught to liberally use &lt;code&gt;boost::bind&lt;/code&gt; and friends. Later on, as a .NET developer, I loved to refactor C# code using LINQ operators. And of course, in Objective-C we now have blocks, so I tend to use &lt;code&gt;enumerateObjectsUsingBlock&lt;/code&gt;, &lt;code&gt;sortedArrayUsingComparator&lt;/code&gt; and &lt;code&gt;filteredArrayUsingPredicate&lt;/code&gt; whenever I can.&lt;/p&gt;

&lt;p&gt;Now I think we can all agree that blocks are not the end-all solution to writing declarative code in Objective-C. In fact, the thing I missed most when switching from C# was the ability to chain higher-order functions to filter, map and fold collections with lazy evaluation, like you can with the &lt;code&gt;Where&lt;/code&gt;, &lt;code&gt;Select&lt;/code&gt; and &lt;code&gt;Aggregate&lt;/code&gt; operators from LINQ.&lt;/p&gt;

&lt;p&gt;Fortunately, Objective-C libraries exist that offer exactly this functionality. &lt;a href=&quot;https://github.com/robrix/RXCollections&quot;&gt;RXCollections&lt;/a&gt; is one such library, and it is used in Ash Furrow’s book to dip the readers’ feet into the FRP water. A similar library is &lt;a href=&quot;http://underscorem.org&quot;&gt;Underscore.m&lt;/a&gt; (inspired by &lt;a href=&quot;http://underscorejs.org&quot;&gt;underscore.js&lt;/a&gt;), which can be used like this to calculate the longest common number prefix in a set of strings:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;    &lt;span class=&#39;n&#39;&gt;NSArray&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;inputStrings&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;@[&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;@&amp;quot;67034X&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;@&amp;quot;67039XXX&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;@&amp;quot;XX&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;@&amp;quot;6704&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;@&amp;quot;67004&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;@&amp;quot;670X&amp;quot;&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;

    &lt;span class=&#39;n&#39;&gt;NSCharacterSet&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;nonDigits&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSCharacterSet&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;decimalDigitCharacterSet&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;invertedSet&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;

    &lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;commonPrefix&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;Underscore&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;array&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;inputStrings&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;map&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;^&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;value&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
           &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;value&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;stringByTrimmingCharactersInSet&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;nonDigits&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;})&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;filter&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;^&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;BOOL&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;value&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
           &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;value&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;length&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;})&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;reduce&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nb&#39;&gt;nil&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;^&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;accumulator&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;value&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
           &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;accumulator&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;?&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;accumulator&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;commonPrefixWithString&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;value&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;options&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;value&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;});&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;// yields @&amp;quot;670”&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code is powerful and elegant at the same time, and it is a typical example of how using functionals in an imperative context can lead to clearer code. In fact you can accomplish the exact same thing in ReactiveCocoa with an &lt;code&gt;RACSequence&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;    &lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;commonPrefix&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[[[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;inputStrings&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;rac_sequence&lt;/span&gt;
        &lt;span class=&#39;nl&#39;&gt;map:&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;^&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;value&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
           &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;value&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;stringByTrimmingCharactersInSet&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;nonDigits&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}]&lt;/span&gt;
        &lt;span class=&#39;nl&#39;&gt;filter:&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;^&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;BOOL&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;value&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
           &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;value&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;length&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}]&lt;/span&gt;
        &lt;span class=&#39;nl&#39;&gt;foldLeftWithStart:&lt;/span&gt;&lt;span class=&#39;nb&#39;&gt;nil&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;reduce&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:^&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;accumulator&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;NSString&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;value&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
           &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;accumulator&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;?&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;accumulator&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;commonPrefixWithString&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;value&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;options&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;value&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;;&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But of course ReactiveCocoa is a lot more ambitious than this. Introducing Functional Reactive Programming in your code requires a real paradigm shift and forces you to rethink what programs, inputs and outputs really are. I do like the premise of FRP, and some of the ReactiveCocoa examples (e.g. chaining dependent network requests) look very convincing to me, but I am still wondering to what extent this can be applied in real life projects.&lt;/p&gt;

&lt;p&gt;For starters, it seems that quite a bit of boilerplate code is needed to lift the behavior of existing classes to the FRP signal space. For common UI components like buttons and switches, this functionality is provided through built in categories, e.g. there is an &lt;code&gt;RACSignalSupport&lt;/code&gt; category on &lt;code&gt;UITextField&lt;/code&gt; that defines an &lt;code&gt;rac_textSignal&lt;/code&gt;. If you want to use other classes with ReactiveCocoa, you will need to do the lifting yourself.&lt;/p&gt;

&lt;p&gt;Since I’ve been working a lot with iBeacons lately, I thought it might be a good idea to try and rewrite some of that code using ReactiveCocoa. After all, we are constantly talking about beacon &lt;em&gt;signals&lt;/em&gt;, so I expected this to be a good match for FRP. In an imperative context, you request an instance of the &lt;code&gt;CLLocationManager&lt;/code&gt; class to start ranging beacons in a certain region, and you observe the results by implementing the corresponding delegate method. Using ReactiveCocoa, this is the code I came up with to turn the observed beacon data into an &lt;code&gt;RACSignal&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;objc&#39;&gt;    &lt;span class=&#39;n&#39;&gt;RACRangeSignal&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;rangeSignal&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; 
        &lt;span class=&#39;p&#39;&gt;[[[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;self&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;rac_signalForSelector&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;@selector&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;locationManager&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;didRangeBeacons&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;inRegion&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
                         &lt;span class=&#39;nl&#39;&gt;fromProtocol:&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;@&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;protocol&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;CLLocationManagerDelegate&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)]&lt;/span&gt;
        &lt;span class=&#39;nl&#39;&gt;reduceEach:&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;^&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;CLLocationManager&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;manager&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;NSArray&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;beacons&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;CLRegion&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;region&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
            &lt;span class=&#39;k&#39;&gt;return&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;beacons&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;rac_sequence&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;signal&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
        &lt;span class=&#39;p&#39;&gt;}]&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;concat&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now I might be missing some subtle ReactiveCocoa shortcuts that would allow me to write this in a more elegant way, and maybe this isn’t such a good use case for FRP after all, but an example like this one won’t exactly help to convince my co-workers (or even myself) to start using ReactiveCocoa in large scale projects.&lt;/p&gt;

&lt;p&gt;Don’t get me wrong. I think ReactiveCocoa is pretty cool. I certainly like it better than &lt;a href=&quot;http://blog.metaobject.com/2014/03/the-siren-call-of-kvo-and-cocoa-bindings.html&quot;&gt;KVO and bindings&lt;/a&gt;. But it’s also a pretty big step. Maybe I just need a bit more time and practice. Or maybe I should start small by applying it to very restricted subsets of projects. And in the meantime, I’ll keep trying to convince my colleagues to adopt block based syntax and higher order functionals.&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>And so it begins...</title>
      <link>http://cocoanuts.mobi/2014/03/16/webdev/</link>
      <pubDate>Sun, 16 Mar 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://cocoanuts.mobi/2014/03/16/webdev</guid>
      <description>&lt;p&gt;I’ll admit it, I have never been much of a web developer. Sure, I once built a website, somewhere around the start of the century. It included a guestbook, a visitor counter and a LED ticker display. It was hosted on a free .tk domain. You get the idea. But ever since things got a bit more serious, I mostly stayed away from web development.&lt;/p&gt;

&lt;p&gt;I once used to blog as well. At a previous company I worked for, I contributed to the technical blog once a month for three years straight. But I never had a personal blog before. My main excuse has always been that I don’t want to deal with the overhead of building a website and keeping it alive. I have considered blogging on a platform like &lt;a href=&quot;http://medium.com&quot;&gt;Medium&lt;/a&gt;, but I tend to agree with &lt;a href=&quot;http://www.hanselman.com/blog/YourWordsAreWasted.aspx&quot;&gt;Scott Hanselman&lt;/a&gt;, who claims that as a developer, not only should you have your own blog, but you should also buy your own domain in order to keep control over your content.&lt;/p&gt;

&lt;p&gt;So what changed? Two things. First, I came across this post by &lt;a href=&quot;http://unicornfree.com/2014/dont-fave-this-post-how-to-really-launch-in-2014&quot;&gt;Amy Hoy&lt;/a&gt;. Her advice to just start small – one tiny step after another – may sound pretty obvious, but it was still a bit of a wake up call for me. Second, I recently realized just how much web development has matured over the past few years and how easy it has become to set up, deploy and maintain something like a static blog site.&lt;/p&gt;

&lt;p&gt;You don’t need to know any Ruby to install gems like &lt;a href=&quot;http://middlemanapp.com&quot;&gt;Middleman&lt;/a&gt; or &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;. You just play around with some open source templates until you find something you like. You link your domain to &lt;a href=&quot;http://pages.github.com&quot;&gt;GitHub Pages&lt;/a&gt; and you can be up and running in a matter of minutes. Call me old-fashioned, but I think there’s something quite magical about being able to deploy a website simply by typing git push.&lt;/p&gt;

&lt;p&gt;So here you have it. A first tiny step. The beginning of something. No promises about frequent updates. No begging to subscribe to my RSS feed. But no more excuses either.&lt;/p&gt;</description>
    </item>
    
    

  </channel> 
</rss>